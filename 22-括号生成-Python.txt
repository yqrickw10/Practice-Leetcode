#因为需要求解所有可能，因此需要使用回溯法，回溯的优化手段是剪纸
#不难想到，如果左括号的数目小于右括号，我们可以提前退出，这就是剪枝条件
#回溯的退出条件，左括号数目等于右括号数目或者 左括号数目+右括号数目 = 2*n
#由于我们需要剪枝，需要从左开始遍历

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def dfs(l,r,s):
            if l>n or r>n: return
            if(l==r==n): res.append(s)
            if l<r: return
            #加一个左括号
            dfs(l+1,r,s+'(')
            #加一个右括号
            dfs(l,r+1,s+')')
        dfs(0,0,'')
        return res