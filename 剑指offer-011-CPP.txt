//傻瓜算法，先排序
class Solution {
public:
    int minArray(vector<int>& numbers) {
        sort(numbers.begin(),numbers.end());
        return numbers[0];
    }
};

//线性遍历
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int last = *numbers.begin();
        for(auto p=numbers.begin()+1;p!=numbers.end();p++){
            if(*p<last) return *p;
        }
        return last;
    }
};

//二分法
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int i=0,j=numbers.size()-1;
        while(i<j){
            int m = (i+j)/2;
            if(numbers[m]>numbers[j]) i=m+1;
            else if(numbers[m]<numbers[j]) j=m;
            else j--;
        }
        return numbers[i];
    }
};

//中间的一步用线性查找去替代
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int i=0,j=numbers.size()-1;
        while(i<j){
            int m = (i+j)/2;
            if(numbers[m]>numbers[j]) i=m+1;
            else if(numbers[m]<numbers[j]) j=m;
            else{
                int x=i;
                for(int k=i+1;k<j;k++){
                    if(numbers[k]<numbers[x]) x=k;
                }
                return numbers[x];
            };
        }
        return numbers[i];
    }
};